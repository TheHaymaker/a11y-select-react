{"version":3,"sources":["utils/index.tsx","Select/Select.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["escapeRegExp","str","replace","SCROLL_OPTIONS","behavior","block","inline","Select","_timeoutID","type","label","selectOptions","selection","hasClearAll","hasCheckboxes","React","useState","isManagingFocus","setIsManagingFocus","dropdownItems","setDropdownItems","useEffect","filteredDropdownItems","setFilteredDropdownItems","selected","setSelected","selectedRefs","setSelectedRefs","multiInFocus","useRef","refs","Array","from","entries","forEach","item","push","createRef","myRef","searchRef","containerRef","isOpen","setIsOpen","currentFocus","setCurrentFocus","searchValue","setSearchValue","current","undefined","setAttribute","handleKeyDownCapture","useCallback","e","key","mySelections","filter","length","focus","btn","querySelector","autoSizeRef","style","width","clientWidth","ref","className","aria-haspopup","aria-expanded","onBlur","window","setTimeout","onFocus","clearTimeout","htmlFor","role","onClick","prev","onMouseDown","preventDefault","onMouseUp","onKeyDownCapture","map","index","tabIndex","aria-label","value","newArr","isChosen","findIndex","el","splice","xmlns","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","x1","y1","x2","y2","id","onChange","val","target","trim","v","trimStart","filteredItems","reduce","filtered","RegExp","test","onKeyDown","stopPropagation","persist","childrenArr","children","scrollIntoView","position","top","left","visibility","overflow","whiteSpace","fontSize","blur","d","onKeyPress","onKeyUp","console","log","data-value","aria-pressed","points","x","y","rx","ry","pointerEvents","cursor","App","setSelectOptions","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b6290c19.chunk.js","sourcesContent":["export const escapeRegExp = (str: string): string => str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')\n","import React from \"react\"\nimport { escapeRegExp } from \"../utils\"\n\ninterface DropdownItem {\n  label: string; \n  value: string;\n}\n\nconst SCROLL_OPTIONS: ScrollIntoViewOptions = {behavior: \"smooth\", block: \"center\", inline: \"nearest\"}\n\nconst Select: React.FC<{\n  type: \"single\" | \"multi\";\n  label: string;\n  selectOptions: DropdownItem[];\n  selection?: DropdownItem[] | [];\n  hasClearAll?: boolean;\n  hasCheckboxes?: boolean;\n}> = ({ type, label, selectOptions, selection = [], hasClearAll = true, hasCheckboxes = false }): React.ReactElement => {\n  let _timeoutID: number\n  const [isManagingFocus, setIsManagingFocus] = React.useState(false)\n\n  const _onBlur = (): void => {\n    // since the blue event emits first\n    // we push the state update to the next\n    // 'tick' on the event loop\n    // by using a setTimeout\n    _timeoutID = window.setTimeout((): void => {\n      if (isManagingFocus) {\n        setIsManagingFocus((): boolean => false)\n        setSearchValue('')\n        setFilteredDropdownItems(dropdownItems)\n      }\n    }, 0)\n  }\n\n  const _onFocus = (): void => {\n    // Since the focus event is emitted\n    // at the same time as the blur event,\n    // and they both bubble up in react,\n    // we can cancel the state change\n    // that takes place inside of the\n    // blur event's setTimeout by clearing\n    // the timeout interval before it takes place\n    // on the event loop\n    // Otherwise, only the blur event is emitted\n    // when the parent loses focus to another\n    // element on the page\n    clearTimeout(_timeoutID)\n    if (!isManagingFocus) {\n      setIsManagingFocus((): boolean => true)\n    }\n    return\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const [dropdownItems, setDropdownItems] = React.useState(selectOptions)\n\n  React.useEffect(() => {\n    setDropdownItems(selectOptions)\n  }, [selectOptions])\n  const [filteredDropdownItems, setFilteredDropdownItems] = React.useState(\n    selectOptions as DropdownItem[]\n  )\n  const [selected, setSelected] = React.useState(selection)\n\n  const [selectedRefs, setSelectedRefs] = React.useState<React.MutableRefObject<HTMLDivElement|null>[]>([])\n  const multiInFocus = React.useRef(-9999)\n\n  React.useEffect(() => {\n    const refs: React.MutableRefObject<HTMLDivElement|null>[] = []\n    Array.from(selected.entries()).forEach((item) => {\n      refs.push(React.createRef())\n    })\n    setSelectedRefs(refs)\n  }, [selected])\n\n \n\n  const myRef: React.MutableRefObject<HTMLUListElement | null> = React.useRef(null)\n  const searchRef: React.MutableRefObject<HTMLInputElement | null> = React.useRef(null)\n  const containerRef: React.MutableRefObject<HTMLDivElement | null> = React.useRef(null)\n  const [isOpen, setIsOpen] = React.useState(false)\n  const [currentFocus, setCurrentFocus] = React.useState(0)\n  const [searchValue, setSearchValue] = React.useState(\"\")\n\n  React.useEffect((): void => {\n    if (!isManagingFocus) {\n      // if it isn't managing focus\n      // close the dropdown\n      setIsOpen(false)\n      setSearchValue('')\n      setFilteredDropdownItems(dropdownItems)\n      if(containerRef.current && containerRef.current !== undefined) {\n        containerRef.current.setAttribute(\"aria-expanded\", 'false')\n      }\n    }\n  }, [dropdownItems, isManagingFocus])\n\n  const handleKeyDownCapture = React.useCallback((e) => {\n    if(e.key === 'ArrowLeft' && !searchValue) {\n      const mySelections = selectedRefs.filter(item => item.current !== null)\n      if(mySelections.length > 0) {\n        if(multiInFocus.current === 0) {\n          return\n        } else {\n          if(multiInFocus.current !== null) {\n            multiInFocus.current = multiInFocus.current !== -9999 ? multiInFocus.current - 1 : mySelections.length - 1\n            const btn = mySelections[multiInFocus.current].current?.querySelector('button')\n            btn?.focus()\n          }\n        }\n      }\n    } else if(e.key === 'ArrowRight' && !searchValue) {\n      if(multiInFocus.current === -9999) {\n        return\n      }\n      const mySelections = selectedRefs.filter(item => item.current != null)\n      if(mySelections.length > 0) {\n        if(multiInFocus.current === mySelections.length - 1) {\n          if(searchRef.current) {\n            searchRef.current.focus()\n          }\n          return\n        } else {\n          multiInFocus.current = multiInFocus.current !== -9999 ? multiInFocus.current + 1 : mySelections.length - 1\n          const btn = mySelections[multiInFocus.current].current?.querySelector('button')\n          btn?.focus()\n        }\n      }\n    }\n  }, [selectedRefs, searchValue])\n\n  const autoSizeRef = React.useRef<HTMLDivElement>(null)\n\n  React.useEffect(() => {\n    if(autoSizeRef.current !== null && searchRef.current) {\n      searchRef.current.style.width = `${autoSizeRef.current.clientWidth + 2}px`\n    }\n\n  }, [searchValue, autoSizeRef])\n\n  return (\n    <div\n      ref={containerRef}\n      className=\"select-container\"\n      aria-haspopup={true}\n      aria-expanded={false}\n      onBlur={_onBlur}\n      onFocus={_onFocus}\n    >\n      <label htmlFor={`${type === 'single' ? 'input-2' : 'input-1'}`}>{label}</label>\n      <div\n        role=\"presentation\"\n        className=\"input-container\"\n        onClick={() => {\n          if(searchRef.current) {\n            searchRef.current.focus()\n          }\n          setIsOpen((prev): boolean => {\n\n            if(prev) {\n              if(containerRef.current) {\n                containerRef.current.setAttribute(\"aria-expanded\", 'false')\n              }\n              return false\n            } else {\n              if(containerRef.current) {\n                containerRef.current.setAttribute(\"aria-expanded\", 'true')\n              }\n              return true\n            }\n          })\n        }}\n        onMouseDown={(e) => {\n          e.preventDefault()\n        }}\n        onMouseUp={(e) => {\n          e.preventDefault()\n        }}\n        onBlur={(e) => e}\n        onFocus={(e) => e}\n        onKeyDownCapture={handleKeyDownCapture}\n      >\n        {type === \"multi\" ? (\n          <div className=\"input-flex\">\n            {selected.length !== 0 && selected.map((item, index): React.ReactNode => (\n              <div \n                ref={selectedRefs[index]} \n                key={item.value}\n                className=\"multiValue\"\n              >\n                <div className=\"multiValue--inner\">{item.label}</div>\n                <button\n                  tabIndex={-1}\n                  aria-label=\"Remove selected item\"\n                  className=\"multiValue--close\"\n                  onClick={(): void => {\n                    if(item.label === \"No Options\" || item.value === '') return\n                    setSelected(prev => {\n                      const newArr = [...prev]\n                      const isChosen = newArr.findIndex(el => el.value === item.value && el.label === item.label)\n                      if(isChosen !== -1) {\n                        // if prev contains the item - remove it\n                        newArr.splice(isChosen, 1)\n                        return newArr\n                      } else {\n                        // else add it\n                        newArr.push(item)\n                        return newArr\n                      }\n\n                    })\n                    \n                    setSearchValue('')\n                    setFilteredDropdownItems(dropdownItems)\n                    if(searchRef.current) {\n                      searchRef.current.focus()\n                    }\n                  }}\n                >\n                  <svg\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    width=\"14\"\n                    height=\"14\"\n                    viewBox=\"0 0 24 24\"\n                    fill=\"none\"\n                    stroke=\"#000000\"\n                    strokeWidth=\"2\"\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"bevel\"\n                  >\n                    <line x1=\"18\"\n                      y1=\"6\"\n                      x2=\"6\"\n                      y2=\"18\"\n                    ></line>\n                    <line x1=\"6\"\n                      y1=\"6\"\n                      x2=\"18\"\n                      y2=\"18\"\n                    ></line>\n                  </svg>\n                </button>\n              </div>\n            ))}\n            <div className=\"input-size-wrapper\">\n              <input\n                ref={searchRef}\n                className=\"search-input\"\n                id={\"input-1\"}\n                type=\"text\"\n                onFocus={(e): void => {\n                  multiInFocus.current = -9999\n                }}\n                value={searchValue ? searchValue : \"\"}\n                onChange={(e): void => {\n                  const val = escapeRegExp(e.target.value.trim())\n                  const v = e.target.value.trimStart()\n                  setSearchValue((prev): string => v)\n                  if (val) {\n\n                    setIsOpen(true)\n                    if(containerRef.current && containerRef.current !== undefined) {\n                      containerRef.current.setAttribute(\"aria-expanded\", 'true')\n                    }\n\n                    let filteredItems = dropdownItems.reduce((filtered: DropdownItem[], item: DropdownItem) => {\n                      if (new RegExp(val, 'gi').test(`${item.label}`)) {\n                        filtered.push(item)\n                      }\n                      return filtered\n                    }, [])\n\n\n                    filteredItems = filteredItems.length\n                      ? filteredItems\n                      : [\n                        {\n                          label: \"No Options\",\n                          value: \"\",\n                        },\n                      ]\n\n                    setFilteredDropdownItems(() => filteredItems)\n                  } else {\n                    setFilteredDropdownItems(() => dropdownItems)\n                  }\n                }}\n                onKeyDown={(e): void => {\n                  e.stopPropagation()\n                  if (e.key === \"ArrowDown\") {\n                    e.persist()\n                    e.preventDefault()\n                    if (isOpen) {\n                      if(myRef.current) {\n                        const childrenArr = (myRef.current.children as HTMLCollection)\n                        if(!searchValue && childrenArr[currentFocus]){\n                          const listItemParent = (childrenArr[currentFocus] as HTMLElement)\n                          const btn = (listItemParent.children[0] as HTMLButtonElement)\n                        \n                          btn.focus()\n                          btn.scrollIntoView(SCROLL_OPTIONS)\n                        } else {\n                          const listItemParent = (childrenArr[0] as HTMLElement)\n                          const btn = (listItemParent.children[0] as HTMLButtonElement)\n                          \n                          btn.focus()\n                          btn.scrollIntoView(SCROLL_OPTIONS)\n                        }\n                        \n                      }\n                      setIsOpen((prev): boolean => {\n                        if (prev) {\n                          if(myRef.current) {\n                            const childrenArr = (myRef.current.children as HTMLCollection)\n                            if(!searchValue && childrenArr[currentFocus]){\n                              const listItemParent = (childrenArr[currentFocus] as HTMLElement)\n                              const btn = (listItemParent.children[0] as HTMLButtonElement)\n                            \n                              setTimeout((): void => {\n                                btn.focus()\n                                btn.scrollIntoView(SCROLL_OPTIONS)\n                              }, 0)\n                            } else {\n                              const listItemParent = (childrenArr[0] as HTMLElement)\n                              const btn = (listItemParent.children[0] as HTMLButtonElement)\n                                \n                              setTimeout((): void => {\n                                btn.focus()\n                                btn.scrollIntoView(SCROLL_OPTIONS)\n                              }, 0)\n                            }\n                          }\n                       \n                          return prev\n                        }\n                        return !prev\n                      })\n                    } else {\n                      setIsOpen((): boolean => {\n                        if(containerRef.current) {\n                          containerRef.current.setAttribute(\"aria-expanded\", 'true')\n                        }\n                        return true\n                      })\n                    }\n                  }\n                }}\n              />\n              <div ref={autoSizeRef}\n                style={\n                  {\n                    position: \"absolute\", \n                    top: 0,\n                    left: 0,\n                    visibility: \"hidden\",\n                    height: 0, \n                    overflow: \"scroll\", \n                    whiteSpace: \"pre\",\n                    fontSize: '16px'\n                  }\n                }\n              >{searchValue}</div>\n            </div>\n          </div>\n        ) : (\n          <div className=\"input-flex\">\n            {selected.length !== 0 && selected.map((item, index): React.ReactNode => (\n              <div key={item.value}\n                className=\"singleValue\"\n              >\n                <div className=\"singleValue--inner\">{!searchValue && item.label}</div>\n                {hasClearAll && \n                    <button\n                      tabIndex={-1}\n                      aria-label=\"Remove selected item\"\n                      className=\"singleValue--close\"\n                      onClick={() => {\n                        setSelected(() => [])\n                        setSearchValue('')\n                        setFilteredDropdownItems(dropdownItems)\n                      }}\n                    >\n                      <svg\n                        xmlns=\"http://www.w3.org/2000/svg\"\n                        width=\"14\"\n                        height=\"14\"\n                        viewBox=\"0 0 24 24\"\n                        fill=\"none\"\n                        stroke=\"#000000\"\n                        strokeWidth=\"2\"\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"bevel\"\n                      >\n                        <line x1=\"18\"\n                          y1=\"6\"\n                          x2=\"6\"\n                          y2=\"18\"\n                        ></line>\n                        <line x1=\"6\"\n                          y1=\"6\"\n                          x2=\"18\"\n                          y2=\"18\"\n                        ></line>\n                      </svg>\n                    </button>}\n              </div>\n            ))}\n            <div className=\"input-size-wrapper\">\n              <input\n                ref={searchRef}\n                className=\"search-input\"\n                id={\"input-2\"}\n                type=\"text\"\n                onFocus={(e): void => {\n                  multiInFocus.current = -9999\n                }}\n                value={searchValue ? searchValue : \"\"}\n                onChange={(e): void => {\n                  if(!isOpen) {\n                    setIsOpen(true)\n                  }\n                  const val = escapeRegExp(e.target.value.trim())\n                  const v = e.target.value.trimStart()\n                  setSearchValue((prev): string => v)\n                  if (val) {\n\n                    let filteredItems = dropdownItems.reduce((filtered: DropdownItem[], item: DropdownItem) => {\n                      if (new RegExp(val, 'gi').test(`${item.label}`)) {\n                        filtered.push(item)\n                      }\n                      return filtered\n                    }, [])\n\n\n                    filteredItems = filteredItems.length\n                      ? filteredItems\n                      : [\n                        {\n                          label: \"No Options\",\n                          value: \"\",\n                        },\n                      ]\n\n                    setFilteredDropdownItems(() => filteredItems)\n                  } else {\n                    setFilteredDropdownItems(() => dropdownItems)\n                  }\n                }}\n                onKeyDown={(e): void => {\n                  e.stopPropagation()\n                  if (e.key === \"ArrowDown\") {\n                    e.preventDefault()\n                    if (isOpen) {\n                      if(myRef.current) {\n                        const childrenArr = (myRef.current.children as HTMLCollection)\n                        if(childrenArr[currentFocus]){\n                          const listItemParent = (childrenArr[currentFocus] as HTMLElement)\n                          const btn = (listItemParent.children[0] as HTMLButtonElement)\n                        \n                          btn.focus()\n                          btn.scrollIntoView(SCROLL_OPTIONS)\n                        } else if(childrenArr[0]){\n                          const listItemParent = (childrenArr[0] as HTMLElement)\n                          const btn = (listItemParent.children[0] as HTMLButtonElement)\n                        \n                          btn.focus()\n                          btn.scrollIntoView(SCROLL_OPTIONS)\n                        }\n                      }\n                    }\n                    setIsOpen((prev): boolean => {\n                      if (prev) {\n                        if(myRef.current) {\n                          const childrenArr = (myRef.current.children as HTMLCollection)\n                          if(childrenArr[currentFocus]){\n                            const listItemParent = (childrenArr[currentFocus] as HTMLElement)\n                            const btn = (listItemParent.children[0] as HTMLButtonElement)\n                            setTimeout((): void => {\n                              btn.focus()\n                              btn.scrollIntoView(SCROLL_OPTIONS)\n                            }, 0)\n                          } else {\n                            if(childrenArr[0]){\n                              const listItemParent = (childrenArr[0] as HTMLElement)\n                              const btn = (listItemParent.children[0] as HTMLButtonElement)\n                              setTimeout((): void => {\n                                btn.focus()\n                                btn.scrollIntoView(SCROLL_OPTIONS)\n                              }, 0)\n                            }\n                          }\n                        }\n                        return prev\n                      }\n                      return !prev\n                    })\n                  }\n                }}\n              />\n              <div ref={autoSizeRef}\n                style={\n                  {\n                    position: \"absolute\", \n                    top: 0,\n                    left: 0,\n                    visibility: \"hidden\",\n                    height: 0, \n                    overflow: \"scroll\", \n                    whiteSpace: \"pre\",\n                    fontSize: '16px'\n                  }\n                }\n              >{searchValue}</div>\n            </div>\n          </div>\n        )}\n        <button\n          aria-label={`Toggle dropdown ${isOpen ? \"closed\" : \"open\"}`}\n          className={`drop-btn ${isOpen ? \"rotate\" : \"\"}`}\n          tabIndex={-1}\n          onClick={(e): void => {\n            e.stopPropagation()\n            if (!isOpen) {\n              setIsOpen((prev) => !prev)\n              if(searchRef.current) {\n                searchRef.current.focus()\n              }\n            } else {\n              setIsOpen((prev) => !prev)\n              if(searchRef.current) {\n                searchRef.current.blur()\n              }\n            }\n          }}\n          onMouseDown={(e): void => {\n            e.stopPropagation()\n            e.preventDefault()\n          }}\n          onMouseUp={(e): void => {\n            e.stopPropagation()\n            e.preventDefault()\n          }}\n        >\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"21\"\n            height=\"21\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            stroke=\"#000000\"\n            strokeWidth=\"2\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"bevel\"\n          >\n            <path d=\"M6 9l6 6 6-6\" />\n          </svg>\n        </button>\n      </div>\n      <div>\n        <ul\n          ref={myRef}\n          className={`dropdown ${isOpen ? \"show-dropdown\" : \"\"}`}\n          role={\"menu\"}\n          onKeyPress={(e): void => {\n            e.stopPropagation()\n            e.preventDefault()\n          }}\n          onKeyUp={(e: React.SyntheticEvent<HTMLUListElement>): void => {\n            e.stopPropagation()\n            e.preventDefault()\n          }}\n          onKeyDown={(e): void => {\n           \n            e.stopPropagation()\n            if (e.key === \"ArrowDown\") {\n              e.preventDefault()\n              if(myRef.current) {\n                if (\n                  myRef.current.children.length === 0 ||\n                  currentFocus === myRef.current.children.length - 1\n                ) {\n                  setTimeout((): void => {\n                    if(myRef.current) {\n\n                      const childrenArr = (myRef.current.children as HTMLCollection)\n                      if(childrenArr[0]){\n                        const listItemParent = (childrenArr[0] as HTMLElement)\n                        const btn = (listItemParent.children[0] as HTMLButtonElement)\n                        btn.focus()\n                        btn.scrollIntoView(SCROLL_OPTIONS)\n                      }\n                    }\n                    setCurrentFocus((prev): number => 0)\n                  }, 0)\n                } else {\n                  setTimeout((): void => {\n                    if(myRef.current) {\n\n                      const childrenArr = (myRef.current.children as HTMLCollection)\n                      console.log(childrenArr)\n                     \n                      if (childrenArr.length <= currentFocus) {\n                        if(childrenArr[0]){\n                          const listItemParent = (childrenArr[0] as HTMLElement)\n                          const btn = (listItemParent.children[0] as HTMLButtonElement)\n                          btn.focus()\n                          btn.scrollIntoView(SCROLL_OPTIONS)\n                        }\n                        setCurrentFocus((prev): number => 0)\n                      } else {\n                        if(childrenArr[currentFocus + 1]){\n                          const listItemParent = (childrenArr[currentFocus + 1] as HTMLElement)\n                          const btn = (listItemParent.children[0] as HTMLButtonElement)\n                          btn.focus()\n                          btn.scrollIntoView(SCROLL_OPTIONS)\n                        }\n                        setCurrentFocus((prev): number => prev + 1)\n                      }\n                    }\n                  }, 0)\n                }\n              }\n            } else if (e.key === \"ArrowUp\") {\n              e.preventDefault()\n\n              if (currentFocus === 0 && myRef.current && myRef.current.children.length > 0) {\n                setTimeout((): void => {\n                  if(myRef.current) {\n                    const listItemParent = (myRef.current.children[\n                      myRef.current.children.length - 1\n                    ] as HTMLElement)\n                    const btn = (listItemParent.children[0] as HTMLButtonElement)\n                    btn.focus()\n                    btn.scrollIntoView(SCROLL_OPTIONS)\n                    setCurrentFocus((prev): number => myRef.current ? myRef.current.children.length - 1 : prev)\n                  }\n                }, 0)\n              } else if (\n                currentFocus !== 0 &&\n                myRef.current &&\n                myRef.current.children.length > 0\n              ) {\n                setTimeout((): void => {\n                  if(myRef.current) {\n                    if (myRef.current.children.length <= currentFocus) {\n                      const listItemParent = (myRef.current.children[0] as HTMLElement)\n                      const btn = (listItemParent.children[0] as HTMLButtonElement)\n                      btn.focus()\n                      btn.scrollIntoView(SCROLL_OPTIONS)\n                      setCurrentFocus((prev): number => 0)\n                    } else {\n                      const listItemParent = (myRef.current.children[currentFocus - 1] as HTMLElement)\n                      const btn = (listItemParent.children[0] as HTMLButtonElement)\n                      btn.focus()\n                      btn.scrollIntoView(SCROLL_OPTIONS)\n                      setCurrentFocus((prev): number => prev - 1)\n                    }\n                  }\n                }, 0)\n              }\n            }\n          }}\n        >\n          {filteredDropdownItems && filteredDropdownItems.length > 0\n            ? filteredDropdownItems.map((item, index): React.ReactNode => (\n              <li\n                key={item.value}\n                className=\"dropdownItem\"\n                aria-label={\"menuitemcheckbox\"}\n                \n              >\n                <button\n                  data-value={item.value}\n                  tabIndex={-1}\n                  aria-label={\"menuitemcheckbox\"}\n                  aria-pressed={selected.findIndex(el => el.label === item.label && el.value === item.value) !== -1}\n                  onClick={(e: React.MouseEvent): void => {\n\n                    if(item.label === \"No Options\" || item.value === '') return\n\n                    if(type === 'multi') {\n                      setSelected(prev => {\n                        const newArr = [...prev]\n                        const isChosen = newArr.findIndex(el => el.value === item.value && el.label === item.label)\n                        if(isChosen !== -1) {\n                          // if prev contains the item - remove it\n                          newArr.splice(isChosen, 1)\n                          return newArr\n                        } else {\n                          // else add it\n                          newArr.push(item)\n                          return newArr\n                        }\n                      })\n                      setSearchValue('')\n                      setFilteredDropdownItems(dropdownItems)\n                    } else {\n                      setSelected(() => [item])\n                      setSearchValue('')\n                      setFilteredDropdownItems(dropdownItems)\n                      if(searchRef.current) {\n                        searchRef.current.focus()\n                      }\n                      setIsOpen((prev): boolean => {\n                        if(containerRef.current) {\n                          containerRef.current.setAttribute(\"aria-expanded\", 'false')\n                        }\n                        return false\n                      })\n                    }\n                  }}\n                  onKeyUp={(e: React.KeyboardEvent): void => {\n                    if (e.key === \"Enter\" || e.key === \" \") {\n                      if(item.label === \"No Options\" || item.value === '') return\n                      if(type === 'multi') {\n                        setSelected(prev => {\n                          const newArr = [...prev]\n                          const isChosen = newArr.findIndex(el => el.value === item.value && el.label === item.label)\n                          if(isChosen !== -1) {\n                            // if prev contains the item - remove it\n                            newArr.splice(isChosen, 1)\n                            return newArr\n                          } else {\n                            // else add it\n                            newArr.push(item)\n                            return newArr\n                          }\n    \n                        })\n                        setSearchValue('')\n                        setFilteredDropdownItems(dropdownItems)\n                      } else {\n                        setSelected(() => [item])\n                        setSearchValue('')\n                        setFilteredDropdownItems(dropdownItems)\n                        \n                        if(searchRef.current) {\n                          searchRef.current.focus()\n                        }\n                        setIsOpen((prev): boolean => {\n                          if(containerRef.current) {\n                            containerRef.current.setAttribute(\"aria-expanded\", 'false')\n                          }\n                          return false\n                        })\n                      }\n                    }\n                  }}\n                >\n                  {\n                    hasCheckboxes ? (selected.findIndex(el => el.value === item.value && el.label === item.label) !== -1 ? (\n                      <svg\n                        xmlns=\"http://www.w3.org/2000/svg\"\n                        width=\"25\"\n                        height=\"21\"\n                        viewBox=\"0 0 24 24\"\n                        fill=\"none\"\n                        stroke=\"#000000\"\n                        strokeWidth=\"2\"\n                        strokeLinecap=\"square\"\n                        strokeLinejoin=\"bevel\"\n                      >\n                        <polyline points=\"9 11 12 14 22 4\"></polyline>\n                        <path d=\"M21 12v7a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11\"></path>\n                      </svg>\n                    ) : (\n                      <svg\n                        xmlns=\"http://www.w3.org/2000/svg\"\n                        width=\"25\"\n                        height=\"21\"\n                        viewBox=\"0 0 24 24\"\n                        fill=\"none\"\n                        stroke=\"#000000\"\n                        strokeWidth=\"2\"\n                        strokeLinecap=\"square\"\n                        strokeLinejoin=\"bevel\"\n                      >\n                        <rect\n                          x=\"3\"\n                          y=\"3\"\n                          width=\"18\"\n                          height=\"18\"\n                          rx=\"2\"\n                          ry=\"2\"\n                        ></rect>\n                      </svg>\n                    )\n                    ) : null\n                  }\n                  {\" \"}\n                  <span\n                    style={{\n                      pointerEvents: \"none\",\n                      cursor: \"none\",\n                    }}\n                  >\n                    {item.label}\n                  </span>\n                </button>\n              </li>\n            ))\n            : null}\n        </ul>\n      </div>\n    </div>\n  )\n}\n\nexport { Select }\n","import React from \"react\"\nimport \"./App.css\"\nimport { Select } from \"./Select\"\n\nconst App: React.FC = (): React.ReactElement => {\n\n  const [selectOptions, setSelectOptions] = React.useState([\n    {\n      value: \"1\",\n      label: \"Option 1\",\n    },\n    {\n      value: \"2\",\n      label: \"Option 2\",\n    },\n    {\n      value: \"3\",\n      label: \"Option 3\",\n    },\n    {\n      value: \"4\",\n      label: \"Option 4\",\n    },\n    {\n      value: \"5\",\n      label: \"Option 5\",\n    },\n    {\n      value: \"6\",\n      label: \"Option 6\",\n    },\n  ])\n\n  return (\n    <div className=\"my-grid\">\n      <Select selectOptions={selectOptions}\n        label=\"Multi Input\"\n        type=\"multi\"\n        hasCheckboxes\n      />\n      <Select \n        selectOptions={selectOptions}\n        label=\"Single Input\"\n        type=\"single\"\n      />\n\n      <button onClick={() => setSelectOptions(prev => [...prev, {\n        value: `${prev.length + 1}`,\n        label: `Option ${prev.length + 1}`,\n      }])}\n      >Add Item</button>\n    </div>\n  )}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config): void {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister(): void {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\nif (process.env.NODE_ENV !== 'production') {\n  import('react-axe').then(\n    ({ default: axe }): void => {\n      axe(React, ReactDOM, 1000)\n      ReactDOM.render(<App />, document.getElementById('root'))\n    }\n  )\n} else {\n  ReactDOM.render(<App />, document.getElementById('root'))\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}