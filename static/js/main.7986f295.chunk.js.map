{"version":3,"sources":["utils/index.tsx","Select/Select.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["escapeRegExp","str","replace","Select","_ref","_timeoutID","type","label","_React$useState","React","_React$useState2","Object","slicedToArray","isManagingFocus","setIsManagingFocus","options","value","selectedOptionsMap","Map","map","obj","set","JSON","stringify","_React$useState3","_React$useState4","selected","setSelected","myRef","searchRef","containerRef","_React$useState5","_React$useState6","dropdownItems","_React$useState7","_React$useState8","filteredDropdownItems","setFilteredDropdownItems","_React$useState9","_React$useState10","isOpen","setIsOpen","_React$useState11","_React$useState12","currentFocus","setCurrentFocus","_React$useState13","_React$useState14","searchValue","setSearchValue","current","setAttribute","react","ref","className","aria-haspopup","aria-expanded","onBlur","setTimeout","onFocus","clearTimeout","htmlFor","onClick","focus","onMouseDown","e","preventDefault","onMouseUp","Array","from","entries","item","option","parse","key","aria-label","prev","next","get","xmlns","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","x1","y1","x2","y2","id","onChange","val","target","trim","v","trimStart","filteredItems","RegExp","test","concat","filter","length","onKeyDown","stopPropagation","el","children","scrollIntoView","tabIndex","blur","d","role","onKeyPress","onKeyUp","index","data-value","aria-checked","points","x","y","rx","ry","style","pointerEvents","cursor","App","react_default","a","createElement","Select_Select","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7986f295.chunk.js","sourcesContent":["export const escapeRegExp = (str: string): string => str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')\n","import * as React from 'react'\nimport { escapeRegExp } from '../utils'\n\nconst Select: React.FC<{\n  type: 'single' | 'multi';\n  label: string;\n}> = ({type, label}) => {\n  let _timeoutID: any;\n  const [isManagingFocus, setIsManagingFocus] = React.useState(false)\n    \n    const _onBlur = () => {\n      // since the blue event emits first\n      // we push the state update to the next\n      // 'tick' on the event loop\n      // by using a setTimeout\n      _timeoutID = setTimeout(() => {\n        if (isManagingFocus) {\n          setIsManagingFocus(() => false);\n        }\n      }, 0);\n    }\n    \n    const _onFocus = () => {\n      // Since the focus event is emitted\n      // at the same time as the blur event,\n      // and they both bubble up in react,\n      // we can cancel the state change\n      // that takes place inside of the\n      // blur event's setTimeout by clearing\n      // the timeout interval before it takes place\n      // on the event loop\n      // Otherwise, only the blur event is emitted\n      // when the parent loses focus to another\n      // element on the page\n      clearTimeout(_timeoutID);\n      if (!isManagingFocus) {\n        setIsManagingFocus(() => true)\n      }\n    }\n\n  const options = [\n    {\n      value: '1',\n      label: 'Option 1'\n    },\n    {\n      value: '2',\n      label: 'Option 2'\n    },\n    {\n      value: '3',\n      label: 'Option 3'\n    },\n    {\n      value: '4',\n      label: 'Option 4'\n    },\n    {\n      value: '5',\n      label: 'Option 5'\n    },\n    {\n      value: '6',\n      label: 'Option 6'\n    }\n  ]\n\n  // const selectedOptionsMap = React.useRef(new Map())\n  const selectedOptionsMap = new Map()\n  options.map(obj => selectedOptionsMap.set(JSON.stringify(obj), false))\n  const [selected, setSelected] = React.useState(selectedOptionsMap)\n\n  const myRef = React.useRef(null as any)\n  const searchRef = React.useRef(null as any)\n  const containerRef = React.useRef(null as any)\n  const [dropdownItems, setDropdownItems] = React.useState(options)\n  const [filteredDropdownItems, setFilteredDropdownItems] = React.useState(options as any[])\n  const [isOpen, setIsOpen] = React.useState(false)\n  const [currentFocus, setCurrentFocus] = React.useState(0)\n  const [searchValue, setSearchValue] = React.useState('')\n\n  React.useEffect(() => {\n  \n    if(!isManagingFocus) {\n      // if it isn't managing focus\n      // close the dropdown\n      setIsOpen(false)\n      containerRef.current.setAttribute('aria-expanded', false)\n    }\n\n  }, [isManagingFocus])\n\n  return (\n    <div\n      ref={containerRef}\n      className=\"select-container\"\n      aria-haspopup={true}\n      aria-expanded={false}\n      onBlur={_onBlur}\n      onFocus={_onFocus}\n    >\n      <label htmlFor=\"input-1\">{label}</label>\n      <div \n        className=\"input-container\" \n        onClick={() => {\n         searchRef.current.focus()\n        }}\n        onMouseDown={(e) => {\n         e.preventDefault()\n        }}\n        onMouseUp={(e) => {\n          e.preventDefault()\n         \n        }}\n        onBlur={() => {}}\n        onFocus={() => {}}\n      >\n        {\n          type === 'multi'\n          ? (\n            <div className=\"input-flex\">\n              {\n                Array.from(selected.entries()).map((item: any) => {\n                  if(item[1]) {\n                    const option = JSON.parse(item[0])\n                    return (\n                      <div key={option.value} className=\"multiValue\">\n                        <div className=\"multiValue--inner\">{option.label}</div>\n                        <button\n                          aria-label='Remove selected item'\n                          className=\"multiValue--close\"\n                          onClick={() => {\n                            const key = item[0];\n                            setSelected(prev => {\n                              const next = new Map(prev)\n                              next.set( key, !next.get(key))\n                              return next\n                            })\n                            searchRef.current.focus()\n                          }}\n                        >\n                          <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"#000000\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"bevel\"><line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"></line><line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"></line></svg>\n                        </button>\n                      </div>\n                    )\n                  }\n                  return null\n                })\n              }\n              <input\n                ref={searchRef}\n                className=\"search-input\"\n                id={'input-1'}  \n                type=\"text\"\n                onFocus={(e) => setIsOpen(() => { \n                  const wrapper = containerRef.current;\n                  wrapper.setAttribute('aria-expanded', true)\n                  return true \n                })}\n                value={searchValue ? searchValue : ''}\n                onChange={(e) => {\n                  const val = escapeRegExp(e.target.value.trim())\n                  const v = e.target.value.trimStart();\n                  setSearchValue(prev => v)\n                  if (val) {\n                    let filteredItems = dropdownItems.map((item: {\n                      label: string\n                      value: string\n                    }) =>  {\n    \n                      if (new RegExp(val).test(`${item.label}`)) {\n                        return item\n                      } else {\n                        return null;\n                      }\n                    }).filter(item => item ? item : false)\n    \n                    filteredItems = filteredItems.length ? filteredItems : [\n                      {\n                        label: 'No Options',\n                        value: ''\n                      }\n                    ]\n    \n                    setFilteredDropdownItems(() => filteredItems)\n                  } else {\n                    setFilteredDropdownItems(() => dropdownItems)\n                  }\n                }}      \n                onKeyDown={(e) => {\n                  e.stopPropagation()\n                  if (e.key === 'ArrowDown') {\n                    e.preventDefault()\n                    if (isOpen) {\n                      const el =  myRef.current.children[currentFocus] ? myRef.current.children[currentFocus] : myRef.current.children[0]\n                      el.focus()\n                      el.scrollIntoView()\n                    }\n                    setIsOpen(prev => { \n                      if(prev){\n                        const el = myRef.current.children[currentFocus] ? myRef.current.children[currentFocus] : myRef.current.children[0]\n    \n                        setTimeout(() => {\n                        el.focus()\n                          el.scrollIntoView()\n                        }, 0)\n                        return prev\n                      }\n                      return !prev\n                    })\n                  }}\n                }\n              />\n            </div>\n          )\n          : (\n            <div className=\"input-flex\">\n              {\n            Array.from(selected.entries()).map((item: any) => {\n              if(item[1]) {\n                const option = JSON.parse(item[0])\n                return (\n                  <div key={option.value} className=\"singleValue\">\n                    <div className=\"singleValue--inner\">{option.label}</div>\n                    <button\n                      aria-label='Remove selected item'\n                      className=\"singleValue--close\"\n                      onClick={() => {\n                        const key = item[0];\n                        setSelected(prev => {\n                          const next = new Map(prev)\n                          next.set( key, !next.get(key))\n                          return next\n                        })\n                      }}\n                    >\n                      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"#000000\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"bevel\"><line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"></line><line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"></line></svg>\n                    </button>\n                  </div>\n                )\n              }\n              return null\n            })\n          }\n          <input\n            ref={searchRef}\n            className=\"search-input\"\n            id={'input-1'}  \n            type=\"text\"\n            onFocus={(e) => setIsOpen(() => { \n              const wrapper = containerRef.current;\n              wrapper.setAttribute('aria-expanded', true)\n              return true \n            })}\n            value={searchValue ? searchValue : ''}\n            onChange={(e) => {\n              const val = escapeRegExp(e.target.value.trim())\n              const v = e.target.value.trimStart();\n              setSearchValue(prev => v)\n              if (val) {\n                let filteredItems = dropdownItems.map((item: {\n                  label: string\n                  value: string\n                }) =>  {\n\n                  if (new RegExp(val).test(`${item.label}`)) {\n                    return item\n                  } else {\n                    return null;\n                  }\n                }).filter(item => item ? item : false)\n\n                filteredItems = filteredItems.length ? filteredItems : [\n                  {\n                    label: 'No Options',\n                    value: ''\n                  }\n                ]\n\n                setFilteredDropdownItems(() => filteredItems)\n              } else {\n                setFilteredDropdownItems(() => dropdownItems)\n              }\n            }}      \n            onKeyDown={(e) => {\n              e.stopPropagation()\n              if (e.key === 'ArrowDown') {\n                e.preventDefault()\n                if (isOpen) {\n                  const el =  myRef.current.children[currentFocus] ? myRef.current.children[currentFocus] : myRef.current.children[0]\n                  el.focus()\n                  el.scrollIntoView()\n                }\n                setIsOpen(prev => { \n                  if(prev){\n                    const el = myRef.current.children[currentFocus] ? myRef.current.children[currentFocus] : myRef.current.children[0]\n\n                    setTimeout(() => {\n                    el.focus()\n                      el.scrollIntoView()\n                    }, 0)\n                    return prev\n                  }\n                  return !prev\n                })\n              }}\n            }\n          />\n          </div>\n          )\n            }\n        <button \n          aria-label={`Toggle dropdown ${isOpen ? 'closed' : 'open'}`}\n          className={`drop-btn ${isOpen ? 'rotate' : ''}`}  \n          tabIndex={-1}\n          onClick={(e) => {\n            e.stopPropagation()\n            if (!isOpen) {\n              setIsOpen(prev => !prev)\n              searchRef.current.focus()\n            } else {\n              setIsOpen(prev => !prev)\n              searchRef.current.blur()\n            }\n          }}\n          onMouseDown={(e) => {\n            e.stopPropagation()\n            e.preventDefault()\n          }}\n          onMouseUp={(e) => {\n            e.stopPropagation()\n            e.preventDefault()\n          }}\n        >\n          <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"31\" height=\"31\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"#000000\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"bevel\"><path d=\"M6 9l6 6 6-6\"/></svg>\n        </button>\n      </div>  \n      <div>\n        <ul\n          ref={myRef}\n          className={`dropdown ${isOpen ? 'show-dropdown' : ''}`}\n          role={'menu'}\n          onKeyPress={(e) => {\n            e.stopPropagation()\n            e.preventDefault()\n          }}\n          onKeyUp={(e) => {\n            e.stopPropagation()\n            e.preventDefault()\n          }}\n          onKeyDown={(e) => {\n            e.stopPropagation()\n            if (e.key === 'ArrowDown') {\n              e.preventDefault()\n              \n              if (\n              myRef.current.children.length === 0 || currentFocus === myRef.current.children.length - 1) {\n               setTimeout(() => {\n                myRef.current.children[0].focus()\n                myRef.current.children[0].scrollIntoView()\n                setCurrentFocus(prev => 0)\n               }, 0)\n              } else {\n                setTimeout(() => {\n                  if(myRef.current.children.length <= currentFocus) {\n                    myRef.current.children[0].focus()\n                    myRef.current.children[0].scrollIntoView()\n                    setCurrentFocus( prev => 0)\n                  } else {\n                    myRef.current.children[currentFocus + 1].focus()\n                    myRef.current.children[currentFocus + 1].scrollIntoView()\n                    setCurrentFocus( prev => prev + 1)\n                  }\n                }, 0)\n              }\n            } else if (e.key === 'ArrowUp') {\n              e.preventDefault()\n              \n              if (\n                currentFocus === 0 && myRef.current.children.length > 0) {\n                  setTimeout(() => {   \n                    myRef.current.children[myRef.current.children.length - 1].focus()\n                    myRef.current.children[myRef.current.children.length - 1].scrollIntoView()\n                    setCurrentFocus(prev =>  myRef.current.children.length - 1)\n                  }, 0)\n                } else if (currentFocus !== 0 && myRef.current.children.length > 0){\n                  setTimeout(() => {\n                    if(myRef.current.children.length <= currentFocus) {\n                      myRef.current.children[0].focus()\n                      myRef.current.children[0].scrollIntoView()\n                      setCurrentFocus( prev => 0)\n                    } else {\n                      myRef.current.children[currentFocus - 1].focus()\n                      myRef.current.children[currentFocus - 1].scrollIntoView()\n                      setCurrentFocus( prev => prev - 1)\n                    }\n                 }, 0)  \n              }\n            }\n          }}\n        >\n          {filteredDropdownItems && filteredDropdownItems.length > 0\n          ? filteredDropdownItems.map((item, index) => (\n              <li \n               key={item.value}\n               id={`listItem--${item.value}`}\n               className=\"dropdownItem\" \n               data-value={item.value}\n               tabIndex={-1}\n               role={'menuitemcheckbox'}\n               aria-checked={selected.get(JSON.stringify(item))}\n               onClick={(e: React.MouseEvent) => {\n                const key = JSON.stringify(item)\n                setSelected(prev => {\n                  const next = new Map(prev)\n                  next.set( key, !next.get(key))\n                  return next\n                })\n               }}\n               onKeyPress={(e: React.KeyboardEvent) => {\n                if (e.key === 'Enter' || e.key === ' ') {\n                  const key = JSON.stringify(item)\n                  setSelected(prev => {\n                    const next = new Map(prev)\n                    next.set( key, !next.get(key))\n                    return next\n                  })\n                }\n               }}\n              >\n                {selected.get(JSON.stringify(item))\n                  ? (<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"31\" height=\"31\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"#000000\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"bevel\"><polyline points=\"9 11 12 14 22 4\"></polyline><path d=\"M21 12v7a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11\"></path></svg>)\n                  : (<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"31\" height=\"31\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"#000000\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"bevel\"><rect x=\"3\" y=\"3\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\"></rect></svg>)}\n                  {' '}\n                  <span style={{\n                    pointerEvents: 'none',\n                    cursor: 'none'\n                  }}>\n                  {item.label}\n                  </span>\n              </li>\n              )\n          )\n          : null\n          }\n        </ul>\n      </div>\n    </div>\n  )\n}\n\nexport {Select}\n","import React from 'react'\nimport logo from './logo.svg'\nimport './App.css'\nimport {Select} from \"./Select\"\n\n\nconst App: React.FC = (): React.ReactElement => (\n  <div>\n    <Select label=\"Multi Input\" type=\"multi\" />\n    <br/>\n    <br/>\n    <br/>\n    <Select label=\"Single Input\" type=\"single\" />\n  </div>\n)\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\ntype Axe = (\n  react: typeof React,\n  reactDOM: typeof ReactDOM,\n  timeout: number\n) => void\n\nReactDOM.render(<App />, document.getElementById('root'))\n\nif (process.env.NODE_ENV !== 'production') {\n  import('react-axe').then(\n    ({ default: axe }): void => {\n      axe(React, ReactDOM, 1000)\n      ReactDOM.render(<App />, document.getElementById('root'))\n    }\n  )\n} else {\n  ReactDOM.render(<App />, document.getElementById('root'))\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}