{"version":3,"sources":["utils/index.tsx","Select/Select.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["escapeRegExp","str","replace","SCROLL_OPTIONS","behavior","block","inline","Select","_timeoutID","type","label","React","useState","isManagingFocus","setIsManagingFocus","options","value","selectedOptionsMap","Map","forEach","obj","set","JSON","stringify","selected","setSelected","myRef","useRef","searchRef","containerRef","dropdownItems","filteredDropdownItems","setFilteredDropdownItems","isOpen","setIsOpen","currentFocus","setCurrentFocus","searchValue","setSearchValue","useEffect","current","undefined","setAttribute","ref","className","aria-haspopup","aria-expanded","onBlur","window","setTimeout","onFocus","clearTimeout","htmlFor","role","onClick","focus","onMouseDown","e","preventDefault","onMouseUp","Array","from","entries","map","item","option","parse","aria-label","key","prev","next","get","xmlns","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","x1","y1","x2","y2","id","onChange","val","target","trim","v","trimStart","filteredItems","reduce","filtered","RegExp","test","push","length","onKeyDown","stopPropagation","persist","console","log","childrenArr","children","btn","scrollIntoView","tabIndex","blur","d","onKeyPress","onKeyUp","index","data-value","aria-pressed","itemInQuestion","newSelected","points","x","y","rx","ry","style","pointerEvents","cursor","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.54e9065c.chunk.js","sourcesContent":["export const escapeRegExp = (str: string): string => str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')\n","import React from \"react\"\nimport { escapeRegExp } from \"../utils\"\n\ninterface DropdownItem {\n  label: string; \n  value: string;\n}\n\nconst SCROLL_OPTIONS: ScrollIntoViewOptions = {behavior: \"smooth\", block: \"center\", inline: \"nearest\"}\n\nconst Select: React.FC<{\n  type: \"single\" | \"multi\";\n  label: string;\n}> = ({ type, label }): React.ReactElement => {\n  let _timeoutID: number\n  const [isManagingFocus, setIsManagingFocus] = React.useState(false)\n\n  const _onBlur = (): void => {\n    // since the blue event emits first\n    // we push the state update to the next\n    // 'tick' on the event loop\n    // by using a setTimeout\n    _timeoutID = window.setTimeout((): void => {\n      if (isManagingFocus) {\n        setIsManagingFocus((): boolean => false)\n      }\n    }, 0)\n  }\n\n  const _onFocus = (): void => {\n    // Since the focus event is emitted\n    // at the same time as the blur event,\n    // and they both bubble up in react,\n    // we can cancel the state change\n    // that takes place inside of the\n    // blur event's setTimeout by clearing\n    // the timeout interval before it takes place\n    // on the event loop\n    // Otherwise, only the blur event is emitted\n    // when the parent loses focus to another\n    // element on the page\n    clearTimeout(_timeoutID)\n    if (!isManagingFocus) {\n      setIsManagingFocus((): boolean => true)\n    }\n    return\n  }\n\n  const options = [\n    {\n      value: \"1\",\n      label: \"Option 1\",\n    },\n    {\n      value: \"2\",\n      label: \"Option 2\",\n    },\n    {\n      value: \"3\",\n      label: \"Option 3\",\n    },\n    {\n      value: \"4\",\n      label: \"Option 4\",\n    },\n    {\n      value: \"5\",\n      label: \"Option 5\",\n    },\n    {\n      value: \"6\",\n      label: \"Option 6\",\n    },\n  ]\n\n  // const selectedOptionsMap = React.useRef(new Map())\n  const selectedOptionsMap = new Map()\n  options.forEach((obj): Map<string, string> => selectedOptionsMap.set(JSON.stringify(obj), false))\n  const [selected, setSelected] = React.useState(selectedOptionsMap)\n\n  const myRef: React.MutableRefObject<HTMLUListElement | null> = React.useRef(null)\n  const searchRef: React.MutableRefObject<HTMLInputElement | null> = React.useRef(null)\n  const containerRef: React.MutableRefObject<HTMLDivElement | null> = React.useRef(null)\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const [dropdownItems, setDropdownItems] = React.useState(options)\n  const [filteredDropdownItems, setFilteredDropdownItems] = React.useState(\n    options as DropdownItem[]\n  )\n  const [isOpen, setIsOpen] = React.useState(false)\n  const [currentFocus, setCurrentFocus] = React.useState(0)\n  const [searchValue, setSearchValue] = React.useState(\"\")\n\n  React.useEffect((): void => {\n    if (!isManagingFocus) {\n      // if it isn't managing focus\n      // close the dropdown\n      setIsOpen(false)\n      if(containerRef.current && containerRef.current !== undefined) {\n        containerRef.current.setAttribute(\"aria-expanded\", 'false')\n      }\n    }\n  }, [isManagingFocus])\n\n  return (\n    <div\n      ref={containerRef}\n      className=\"select-container\"\n      aria-haspopup={true}\n      aria-expanded={false}\n      onBlur={_onBlur}\n      onFocus={_onFocus}\n    >\n      <label htmlFor={`${type === 'single' ? 'input-2' : 'input-1'}`}>{label}</label>\n      <div\n        role=\"presentation\"\n        className=\"input-container\"\n        onClick={() => {\n          if(searchRef.current) {\n            searchRef.current.focus()\n          }\n        }}\n        onMouseDown={(e) => {\n          e.preventDefault()\n        }}\n        onMouseUp={(e) => {\n          e.preventDefault()\n        }}\n        onBlur={(e) => e}\n        onFocus={(e) => e}\n      >\n        {type === \"multi\" ? (\n          <div className=\"input-flex\">\n            {Array.from(selected.entries()).map((item: [string, string]): React.ReactNode => {\n              if (item[1]) {\n                const option = JSON.parse(item[0])\n                return (\n                  <div key={option.value}\n                    className=\"multiValue\"\n                  >\n                    <div className=\"multiValue--inner\">{option.label}</div>\n                    <button\n                      aria-label=\"Remove selected item\"\n                      className=\"multiValue--close\"\n                      onClick={(): void => {\n                        const key = item[0]\n                        setSelected((prev): Map<string,string> => {\n                          const next = new Map(prev)\n                          next.set(key, !next.get(key))\n                          return next\n                        })\n                        if(searchRef.current) {\n                          searchRef.current.focus()\n                        }\n                      }}\n                    >\n                      <svg\n                        xmlns=\"http://www.w3.org/2000/svg\"\n                        width=\"14\"\n                        height=\"14\"\n                        viewBox=\"0 0 24 24\"\n                        fill=\"none\"\n                        stroke=\"#000000\"\n                        strokeWidth=\"2\"\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"bevel\"\n                      >\n                        <line x1=\"18\"\n                          y1=\"6\"\n                          x2=\"6\"\n                          y2=\"18\"\n                        ></line>\n                        <line x1=\"6\"\n                          y1=\"6\"\n                          x2=\"18\"\n                          y2=\"18\"\n                        ></line>\n                      </svg>\n                    </button>\n                  </div>\n                )\n              }\n              return null\n            })}\n            <input\n              ref={searchRef}\n              className=\"search-input\"\n              id={\"input-1\"}\n              type=\"text\"\n              onFocus={(e): void =>\n                setIsOpen((): boolean => {\n                  if(containerRef.current) {\n                    containerRef.current.setAttribute(\"aria-expanded\", 'true')\n                  }\n                  return true\n                })}\n              value={searchValue ? searchValue : \"\"}\n              onChange={(e): void => {\n                const val = escapeRegExp(e.target.value.trim())\n                const v = e.target.value.trimStart()\n                setSearchValue((prev): string => v)\n                if (val) {\n\n                  let filteredItems = dropdownItems.reduce((filtered: DropdownItem[], item: DropdownItem) => {\n                    if (new RegExp(val).test(`${item.label}`)) {\n                      filtered.push(item)\n                    }\n                    return filtered\n                  }, [])\n\n\n                  filteredItems = filteredItems.length\n                    ? filteredItems\n                    : [\n                      {\n                        label: \"No Options\",\n                        value: \"\",\n                      },\n                    ]\n\n                  setFilteredDropdownItems(() => filteredItems)\n                } else {\n                  setFilteredDropdownItems(() => dropdownItems)\n                }\n              }}\n              onKeyDown={(e): void => {\n                e.stopPropagation()\n                if (e.key === \"ArrowDown\") {\n                  e.persist()\n                  console.log('key down: ', e)\n                  e.preventDefault()\n                  if (isOpen) {\n                    if(myRef.current) {\n                      const childrenArr = (myRef.current.children as HTMLCollection)\n                      if(childrenArr[currentFocus]){\n                        const listItemParent = (childrenArr[currentFocus] as HTMLElement)\n                        const btn = (listItemParent.children[0] as HTMLButtonElement)\n                        \n                        btn.focus()\n                        btn.scrollIntoView(SCROLL_OPTIONS)\n                      }\n                    }\n                    setIsOpen((prev): boolean => {\n                      if (prev) {\n                        if(myRef.current) {\n                          const childrenArr = (myRef.current.children as HTMLCollection)\n                          if(childrenArr[currentFocus]){\n                            const listItemParent = (childrenArr[currentFocus] as HTMLElement)\n                            const btn = (listItemParent.children[0] as HTMLButtonElement)\n                            \n                            setTimeout((): void => {\n                              btn.focus()\n                              btn.scrollIntoView(SCROLL_OPTIONS)\n                            }, 0)\n                          }\n                        }\n                       \n                        return prev\n                      }\n                      return !prev\n                    })\n                  }\n                }\n              }}\n            />\n          </div>\n        ) : (\n          <div className=\"input-flex\">\n            {Array.from(selected.entries()).map((item: [string, string]): React.ReactNode => {\n              if (item[1]) {\n                const option = JSON.parse(item[0])\n                return (\n                  <div key={option.value}\n                    className=\"singleValue\"\n                  >\n                    <div className=\"singleValue--inner\">{option.label}</div>\n                    <button\n                      aria-label=\"Remove selected item\"\n                      className=\"singleValue--close\"\n                      onClick={() => {\n                        const key = item[0]\n                        setSelected((prev) => {\n                          const next = new Map(prev)\n                          next.set(key, !next.get(key))\n                          return next\n                        })\n                      }}\n                    >\n                      <svg\n                        xmlns=\"http://www.w3.org/2000/svg\"\n                        width=\"14\"\n                        height=\"14\"\n                        viewBox=\"0 0 24 24\"\n                        fill=\"none\"\n                        stroke=\"#000000\"\n                        strokeWidth=\"2\"\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"bevel\"\n                      >\n                        <line x1=\"18\"\n                          y1=\"6\"\n                          x2=\"6\"\n                          y2=\"18\"\n                        ></line>\n                        <line x1=\"6\"\n                          y1=\"6\"\n                          x2=\"18\"\n                          y2=\"18\"\n                        ></line>\n                      </svg>\n                    </button>\n                  </div>\n                )\n              }\n              return null\n            })}\n            <input\n              ref={searchRef}\n              className=\"search-input\"\n              id={\"input-2\"}\n              type=\"text\"\n              onFocus={(e): void =>\n                setIsOpen((): boolean => {\n                  if(containerRef.current) {\n                    containerRef.current.setAttribute(\"aria-expanded\", 'true')\n                  }\n                  return true\n                })}\n              value={searchValue ? searchValue : \"\"}\n              onChange={(e): void => {\n                const val = escapeRegExp(e.target.value.trim())\n                const v = e.target.value.trimStart()\n                setSearchValue((prev): string => v)\n                if (val) {\n\n                  let filteredItems = dropdownItems.reduce((filtered: DropdownItem[], item: DropdownItem) => {\n                    if (new RegExp(val).test(`${item.label}`)) {\n                      filtered.push(item)\n                    }\n                    return filtered\n                  }, [])\n\n\n                  filteredItems = filteredItems.length\n                    ? filteredItems\n                    : [\n                      {\n                        label: \"No Options\",\n                        value: \"\",\n                      },\n                    ]\n\n                  setFilteredDropdownItems(() => filteredItems)\n                } else {\n                  setFilteredDropdownItems(() => dropdownItems)\n                }\n              }}\n              onKeyDown={(e): void => {\n                e.stopPropagation()\n                if (e.key === \"ArrowDown\") {\n                  e.preventDefault()\n                  if (isOpen) {\n                    if(myRef.current) {\n                      const childrenArr = (myRef.current.children as HTMLCollection)\n                      if(childrenArr[currentFocus]){\n                        const listItemParent = (childrenArr[currentFocus] as HTMLElement)\n                        const btn = (listItemParent.children[0] as HTMLButtonElement)\n                        \n                        btn.focus()\n                        btn.scrollIntoView(SCROLL_OPTIONS)\n                      } else if(childrenArr[0]){\n                        const listItemParent = (childrenArr[0] as HTMLElement)\n                        const btn = (listItemParent.children[0] as HTMLButtonElement)\n                        \n                        btn.focus()\n                        btn.scrollIntoView(SCROLL_OPTIONS)\n                      }\n                    }\n                  }\n                  setIsOpen((prev): boolean => {\n                    if (prev) {\n                      if(myRef.current) {\n                        const childrenArr = (myRef.current.children as HTMLCollection)\n                        if(childrenArr[currentFocus]){\n                          const listItemParent = (childrenArr[currentFocus] as HTMLElement)\n                          const btn = (listItemParent.children[0] as HTMLButtonElement)\n                          setTimeout((): void => {\n                            btn.focus()\n                            btn.scrollIntoView(SCROLL_OPTIONS)\n                          }, 0)\n                        }\n                      }\n                      return prev\n                    }\n                    return !prev\n                  })\n                }\n              }}\n            />\n          </div>\n        )}\n        <button\n          aria-label={`Toggle dropdown ${isOpen ? \"closed\" : \"open\"}`}\n          className={`drop-btn ${isOpen ? \"rotate\" : \"\"}`}\n          tabIndex={-1}\n          onClick={(e): void => {\n            e.stopPropagation()\n            if (!isOpen) {\n              setIsOpen((prev) => !prev)\n              if(searchRef.current) {\n                searchRef.current.focus()\n              }\n            } else {\n              setIsOpen((prev) => !prev)\n              if(searchRef.current) {\n                searchRef.current.blur()\n              }\n            }\n          }}\n          onMouseDown={(e): void => {\n            e.stopPropagation()\n            e.preventDefault()\n          }}\n          onMouseUp={(e): void => {\n            e.stopPropagation()\n            e.preventDefault()\n          }}\n        >\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"31\"\n            height=\"31\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            stroke=\"#000000\"\n            strokeWidth=\"2\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"bevel\"\n          >\n            <path d=\"M6 9l6 6 6-6\" />\n          </svg>\n        </button>\n      </div>\n      <div>\n        <ul\n          ref={myRef}\n          className={`dropdown ${isOpen ? \"show-dropdown\" : \"\"}`}\n          role={\"menu\"}\n          onKeyPress={(e): void => {\n            e.stopPropagation()\n            e.preventDefault()\n          }}\n          onKeyUp={(e: React.SyntheticEvent<HTMLUListElement>): void => {\n            e.stopPropagation()\n            e.preventDefault()\n          }}\n          onKeyDown={(e): void => {\n           \n            e.stopPropagation()\n            if (e.key === \"ArrowDown\") {\n              e.preventDefault()\n              if(myRef.current) {\n\n                if (\n                  myRef.current.children.length === 0 ||\n                  currentFocus === myRef.current.children.length - 1\n                ) {\n                  setTimeout((): void => {\n                    if(myRef.current) {\n\n                      const childrenArr = (myRef.current.children as HTMLCollection)\n                      if(childrenArr[0]){\n                        const listItemParent = (childrenArr[0] as HTMLElement)\n                        const btn = (listItemParent.children[0] as HTMLButtonElement)\n                        btn.focus()\n                        btn.scrollIntoView(SCROLL_OPTIONS)\n                      }\n                    }\n                    setCurrentFocus((prev): number => 0)\n                  }, 0)\n                } else {\n                  setTimeout((): void => {\n                    if(myRef.current) {\n\n                      const childrenArr = (myRef.current.children as HTMLCollection)\n                     \n                      if (childrenArr.length <= currentFocus) {\n                        if(childrenArr[0]){\n                          const listItemParent = (childrenArr[0] as HTMLElement)\n                          const btn = (listItemParent.children[0] as HTMLButtonElement)\n                          btn.focus()\n                          btn.scrollIntoView(SCROLL_OPTIONS)\n                        }\n                        setCurrentFocus((prev): number => 0)\n                      } else {\n                        if(childrenArr[currentFocus + 1]){\n                          const listItemParent = (childrenArr[currentFocus + 1] as HTMLElement)\n                          const btn = (listItemParent.children[0] as HTMLButtonElement)\n                          btn.focus()\n                          btn.scrollIntoView(SCROLL_OPTIONS)\n                        }\n                        setCurrentFocus((prev): number => prev + 1)\n                      }\n                    }\n                  }, 0)\n                }\n              }\n            } else if (e.key === \"ArrowUp\") {\n              e.preventDefault()\n\n              if (currentFocus === 0 && myRef.current && myRef.current.children.length > 0) {\n                setTimeout((): void => {\n                  if(myRef.current) {\n                    const listItemParent = (myRef.current.children[\n                      myRef.current.children.length - 1\n                    ] as HTMLElement)\n                    const btn = (listItemParent.children[0] as HTMLButtonElement)\n                    btn.focus()\n                    btn.scrollIntoView(SCROLL_OPTIONS)\n                    setCurrentFocus((prev): number => myRef.current ? myRef.current.children.length - 1 : prev)\n                  }\n                }, 0)\n              } else if (\n                currentFocus !== 0 &&\n                myRef.current &&\n                myRef.current.children.length > 0\n              ) {\n                setTimeout((): void => {\n                  if(myRef.current) {\n                    if (myRef.current.children.length <= currentFocus) {\n                      const listItemParent = (myRef.current.children[0] as HTMLElement)\n                      const btn = (listItemParent.children[0] as HTMLButtonElement)\n                      btn.focus()\n                      btn.scrollIntoView(SCROLL_OPTIONS)\n                      setCurrentFocus((prev): number => 0)\n                    } else {\n                      const listItemParent = (myRef.current.children[currentFocus - 1] as HTMLElement)\n                      const btn = (listItemParent.children[0] as HTMLButtonElement)\n                      btn.focus()\n                      btn.scrollIntoView(SCROLL_OPTIONS)\n                      setCurrentFocus((prev): number => prev - 1)\n                    }\n                  }\n                }, 0)\n              }\n            }\n          }}\n        >\n          {filteredDropdownItems && filteredDropdownItems.length > 0\n            ? filteredDropdownItems.map((item, index): React.ReactNode => (\n              <li\n                key={item.value}\n                id={`listItem--${item.value}`}\n                className=\"dropdownItem\"\n                \n              >\n                <button\n                  data-value={item.value}\n                  tabIndex={-1}\n                  aria-label={\"menuitemcheckbox\"}\n                  aria-pressed={selected.get(JSON.stringify(item))}\n                  onClick={(e: React.MouseEvent): void => {\n                    const key = JSON.stringify(item)\n\n                    if(type === 'multi') {\n                      setSelected((prev): Map<string, number> => {\n                        const next = new Map(prev)\n                        next.set(key, !next.get(key))\n                        return next\n                      })\n                    } else {\n                      const itemInQuestion = JSON.stringify(item)\n                      setSelected((prev): Map<string, number> => {\n                        const newSelected = new Map()\n                        Array.from(prev).forEach(([key, value]) => {\n                          if(itemInQuestion === key) {\n                            newSelected.set(key, true)\n                          } else {\n                            newSelected.set(key, false)\n                          }\n                        })\n                        // return next\n                        return newSelected\n                      })\n                    }\n                  }}\n                  onKeyUp={(e: React.KeyboardEvent): void => {\n                    const key = JSON.stringify(item)\n\n                    if (e.key === \"Enter\" || e.key === \" \") {\n                      if(type === 'multi') {\n                        setSelected((prev): Map<string, number> => {\n                          const next = new Map(prev)\n                          next.set(key, !next.get(key))\n                          return next\n                        })\n                      } else {\n                        const itemInQuestion = JSON.stringify(item)\n                        setSelected((prev): Map<string, number> => {\n                          const newSelected = new Map()\n                          Array.from(prev).forEach(([key, value]) => {\n                            if(itemInQuestion === key) {\n                              newSelected.set(key, true)\n                            } else {\n                              newSelected.set(key, false)\n                            }\n                          })\n                          // return next\n                          return newSelected\n                        })\n                      }\n                    }\n\n                  }}\n                >\n\n                  {selected.get(JSON.stringify(item)) ? (\n                    <svg\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      width=\"25\"\n                      height=\"31\"\n                      viewBox=\"0 0 24 24\"\n                      fill=\"none\"\n                      stroke=\"#000000\"\n                      strokeWidth=\"2\"\n                      strokeLinecap=\"square\"\n                      strokeLinejoin=\"bevel\"\n                    >\n                      <polyline points=\"9 11 12 14 22 4\"></polyline>\n                      <path d=\"M21 12v7a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11\"></path>\n                    </svg>\n                  ) : (\n                    <svg\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      width=\"25\"\n                      height=\"31\"\n                      viewBox=\"0 0 24 24\"\n                      fill=\"none\"\n                      stroke=\"#000000\"\n                      strokeWidth=\"2\"\n                      strokeLinecap=\"square\"\n                      strokeLinejoin=\"bevel\"\n                    >\n                      <rect\n                        x=\"3\"\n                        y=\"3\"\n                        width=\"18\"\n                        height=\"18\"\n                        rx=\"2\"\n                        ry=\"2\"\n                      ></rect>\n                    </svg>\n                  )}{\" \"}\n                  <span\n                    style={{\n                      pointerEvents: \"none\",\n                      cursor: \"none\",\n                    }}\n                  >\n                    {item.label}\n                  </span>\n                </button>\n              </li>\n            ))\n            : null}\n        </ul>\n      </div>\n    </div>\n  )\n}\n\nexport { Select }\n","import React from \"react\"\nimport \"./App.css\"\nimport { Select } from \"./Select\"\n\nconst App: React.FC = (): React.ReactElement => (\n  <div>\n    <Select label=\"Multi Input\"\n      type=\"multi\"\n    />\n    <br />\n    <br />\n    <br />\n    <Select label=\"Single Input\"\n      type=\"single\"\n    />\n  </div>\n)\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config): void {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister(): void {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\nif (process.env.NODE_ENV !== 'production') {\n  import('react-axe').then(\n    ({ default: axe }): void => {\n      axe(React, ReactDOM, 1000)\n      ReactDOM.render(<App />, document.getElementById('root'))\n    }\n  )\n} else {\n  ReactDOM.render(<App />, document.getElementById('root'))\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}